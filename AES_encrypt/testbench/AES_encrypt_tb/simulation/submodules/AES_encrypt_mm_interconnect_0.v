// AES_encrypt_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 24.1 1077

`timescale 1 ps / 1 ps
module AES_encrypt_mm_interconnect_0 (
		output wire [5:0]  AES_AXI_0_AES_axi4lite_slave_1_awaddr,             //              AES_AXI_0_AES_axi4lite_slave_1.awaddr
		output wire [2:0]  AES_AXI_0_AES_axi4lite_slave_1_awprot,             //                                            .awprot
		output wire        AES_AXI_0_AES_axi4lite_slave_1_awvalid,            //                                            .awvalid
		input  wire        AES_AXI_0_AES_axi4lite_slave_1_awready,            //                                            .awready
		output wire [31:0] AES_AXI_0_AES_axi4lite_slave_1_wdata,              //                                            .wdata
		output wire [3:0]  AES_AXI_0_AES_axi4lite_slave_1_wstrb,              //                                            .wstrb
		output wire        AES_AXI_0_AES_axi4lite_slave_1_wvalid,             //                                            .wvalid
		input  wire        AES_AXI_0_AES_axi4lite_slave_1_wready,             //                                            .wready
		input  wire [1:0]  AES_AXI_0_AES_axi4lite_slave_1_bresp,              //                                            .bresp
		input  wire        AES_AXI_0_AES_axi4lite_slave_1_bvalid,             //                                            .bvalid
		output wire        AES_AXI_0_AES_axi4lite_slave_1_bready,             //                                            .bready
		output wire [5:0]  AES_AXI_0_AES_axi4lite_slave_1_araddr,             //                                            .araddr
		output wire [2:0]  AES_AXI_0_AES_axi4lite_slave_1_arprot,             //                                            .arprot
		output wire        AES_AXI_0_AES_axi4lite_slave_1_arvalid,            //                                            .arvalid
		input  wire        AES_AXI_0_AES_axi4lite_slave_1_arready,            //                                            .arready
		input  wire [31:0] AES_AXI_0_AES_axi4lite_slave_1_rdata,              //                                            .rdata
		input  wire [1:0]  AES_AXI_0_AES_axi4lite_slave_1_rresp,              //                                            .rresp
		input  wire        AES_AXI_0_AES_axi4lite_slave_1_rvalid,             //                                            .rvalid
		output wire        AES_AXI_0_AES_axi4lite_slave_1_rready,             //                                            .rready
		input  wire [31:0] intel_niosv_m_0_data_manager_awaddr,               //                intel_niosv_m_0_data_manager.awaddr
		input  wire [2:0]  intel_niosv_m_0_data_manager_awprot,               //                                            .awprot
		input  wire        intel_niosv_m_0_data_manager_awvalid,              //                                            .awvalid
		output wire        intel_niosv_m_0_data_manager_awready,              //                                            .awready
		input  wire [31:0] intel_niosv_m_0_data_manager_wdata,                //                                            .wdata
		input  wire [3:0]  intel_niosv_m_0_data_manager_wstrb,                //                                            .wstrb
		input  wire        intel_niosv_m_0_data_manager_wvalid,               //                                            .wvalid
		output wire        intel_niosv_m_0_data_manager_wready,               //                                            .wready
		output wire [1:0]  intel_niosv_m_0_data_manager_bresp,                //                                            .bresp
		output wire        intel_niosv_m_0_data_manager_bvalid,               //                                            .bvalid
		input  wire        intel_niosv_m_0_data_manager_bready,               //                                            .bready
		input  wire [31:0] intel_niosv_m_0_data_manager_araddr,               //                                            .araddr
		input  wire [2:0]  intel_niosv_m_0_data_manager_arprot,               //                                            .arprot
		input  wire        intel_niosv_m_0_data_manager_arvalid,              //                                            .arvalid
		output wire        intel_niosv_m_0_data_manager_arready,              //                                            .arready
		output wire [31:0] intel_niosv_m_0_data_manager_rdata,                //                                            .rdata
		output wire [1:0]  intel_niosv_m_0_data_manager_rresp,                //                                            .rresp
		output wire        intel_niosv_m_0_data_manager_rvalid,               //                                            .rvalid
		input  wire        intel_niosv_m_0_data_manager_rready,               //                                            .rready
		input  wire [31:0] intel_niosv_m_0_instruction_manager_awaddr,        //         intel_niosv_m_0_instruction_manager.awaddr
		input  wire [2:0]  intel_niosv_m_0_instruction_manager_awprot,        //                                            .awprot
		input  wire        intel_niosv_m_0_instruction_manager_awvalid,       //                                            .awvalid
		output wire        intel_niosv_m_0_instruction_manager_awready,       //                                            .awready
		input  wire [31:0] intel_niosv_m_0_instruction_manager_wdata,         //                                            .wdata
		input  wire [3:0]  intel_niosv_m_0_instruction_manager_wstrb,         //                                            .wstrb
		input  wire        intel_niosv_m_0_instruction_manager_wvalid,        //                                            .wvalid
		output wire        intel_niosv_m_0_instruction_manager_wready,        //                                            .wready
		output wire [1:0]  intel_niosv_m_0_instruction_manager_bresp,         //                                            .bresp
		output wire        intel_niosv_m_0_instruction_manager_bvalid,        //                                            .bvalid
		input  wire        intel_niosv_m_0_instruction_manager_bready,        //                                            .bready
		input  wire [31:0] intel_niosv_m_0_instruction_manager_araddr,        //                                            .araddr
		input  wire [2:0]  intel_niosv_m_0_instruction_manager_arprot,        //                                            .arprot
		input  wire        intel_niosv_m_0_instruction_manager_arvalid,       //                                            .arvalid
		output wire        intel_niosv_m_0_instruction_manager_arready,       //                                            .arready
		output wire [31:0] intel_niosv_m_0_instruction_manager_rdata,         //                                            .rdata
		output wire [1:0]  intel_niosv_m_0_instruction_manager_rresp,         //                                            .rresp
		output wire        intel_niosv_m_0_instruction_manager_rvalid,        //                                            .rvalid
		input  wire        intel_niosv_m_0_instruction_manager_rready,        //                                            .rready
		input  wire        clk_0_clk_clk,                                     //                                   clk_0_clk.clk
		input  wire        intel_niosv_m_0_reset_reset_bridge_in_reset_reset, // intel_niosv_m_0_reset_reset_bridge_in_reset.reset
		output wire [15:0] intel_niosv_m_0_dm_agent_address,                  //                    intel_niosv_m_0_dm_agent.address
		output wire        intel_niosv_m_0_dm_agent_write,                    //                                            .write
		output wire        intel_niosv_m_0_dm_agent_read,                     //                                            .read
		input  wire [31:0] intel_niosv_m_0_dm_agent_readdata,                 //                                            .readdata
		output wire [31:0] intel_niosv_m_0_dm_agent_writedata,                //                                            .writedata
		input  wire        intel_niosv_m_0_dm_agent_readdatavalid,            //                                            .readdatavalid
		input  wire        intel_niosv_m_0_dm_agent_waitrequest,              //                                            .waitrequest
		output wire [5:0]  intel_niosv_m_0_timer_sw_agent_address,            //              intel_niosv_m_0_timer_sw_agent.address
		output wire        intel_niosv_m_0_timer_sw_agent_write,              //                                            .write
		output wire        intel_niosv_m_0_timer_sw_agent_read,               //                                            .read
		input  wire [31:0] intel_niosv_m_0_timer_sw_agent_readdata,           //                                            .readdata
		output wire [31:0] intel_niosv_m_0_timer_sw_agent_writedata,          //                                            .writedata
		output wire [3:0]  intel_niosv_m_0_timer_sw_agent_byteenable,         //                                            .byteenable
		input  wire        intel_niosv_m_0_timer_sw_agent_readdatavalid,      //                                            .readdatavalid
		input  wire        intel_niosv_m_0_timer_sw_agent_waitrequest,        //                                            .waitrequest
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,             //               jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,               //                                            .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                //                                            .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,            //                                            .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,           //                                            .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,         //                                            .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,          //                                            .chipselect
		output wire [14:0] onchip_memory2_0_s1_address,                       //                         onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                         //                                            .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                      //                                            .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                     //                                            .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                    //                                            .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                    //                                            .chipselect
		output wire        onchip_memory2_0_s1_clken                          //                                            .clken
	);

	wire          rsp_mux_src_valid;                                                    // rsp_mux:src_valid -> intel_niosv_m_0_data_manager_agent:write_rp_valid
	wire  [105:0] rsp_mux_src_data;                                                     // rsp_mux:src_data -> intel_niosv_m_0_data_manager_agent:write_rp_data
	wire          rsp_mux_src_ready;                                                    // intel_niosv_m_0_data_manager_agent:write_rp_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                                  // rsp_mux:src_channel -> intel_niosv_m_0_data_manager_agent:write_rp_channel
	wire          rsp_mux_src_startofpacket;                                            // rsp_mux:src_startofpacket -> intel_niosv_m_0_data_manager_agent:write_rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                              // rsp_mux:src_endofpacket -> intel_niosv_m_0_data_manager_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                // rsp_mux_001:src_valid -> intel_niosv_m_0_data_manager_agent:read_rp_valid
	wire  [105:0] rsp_mux_001_src_data;                                                 // rsp_mux_001:src_data -> intel_niosv_m_0_data_manager_agent:read_rp_data
	wire          rsp_mux_001_src_ready;                                                // intel_niosv_m_0_data_manager_agent:read_rp_ready -> rsp_mux_001:src_ready
	wire    [5:0] rsp_mux_001_src_channel;                                              // rsp_mux_001:src_channel -> intel_niosv_m_0_data_manager_agent:read_rp_channel
	wire          rsp_mux_001_src_startofpacket;                                        // rsp_mux_001:src_startofpacket -> intel_niosv_m_0_data_manager_agent:read_rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                          // rsp_mux_001:src_endofpacket -> intel_niosv_m_0_data_manager_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                    // cmd_mux:src_valid -> AES_AXI_0_AES_axi4lite_slave_1_agent:write_cp_valid
	wire  [105:0] cmd_mux_src_data;                                                     // cmd_mux:src_data -> AES_AXI_0_AES_axi4lite_slave_1_agent:write_cp_data
	wire          cmd_mux_src_ready;                                                    // AES_AXI_0_AES_axi4lite_slave_1_agent:write_cp_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                                  // cmd_mux:src_channel -> AES_AXI_0_AES_axi4lite_slave_1_agent:write_cp_channel
	wire          cmd_mux_src_startofpacket;                                            // cmd_mux:src_startofpacket -> AES_AXI_0_AES_axi4lite_slave_1_agent:write_cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                              // cmd_mux:src_endofpacket -> AES_AXI_0_AES_axi4lite_slave_1_agent:write_cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                // cmd_mux_001:src_valid -> AES_AXI_0_AES_axi4lite_slave_1_agent:read_cp_valid
	wire  [105:0] cmd_mux_001_src_data;                                                 // cmd_mux_001:src_data -> AES_AXI_0_AES_axi4lite_slave_1_agent:read_cp_data
	wire          cmd_mux_001_src_ready;                                                // AES_AXI_0_AES_axi4lite_slave_1_agent:read_cp_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                              // cmd_mux_001:src_channel -> AES_AXI_0_AES_axi4lite_slave_1_agent:read_cp_channel
	wire          cmd_mux_001_src_startofpacket;                                        // cmd_mux_001:src_startofpacket -> AES_AXI_0_AES_axi4lite_slave_1_agent:read_cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                          // cmd_mux_001:src_endofpacket -> AES_AXI_0_AES_axi4lite_slave_1_agent:read_cp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                      // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                   // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                   // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                       // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                    // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                          // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                 // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                          // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                     // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                         // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                    // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                  // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [106:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                   // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                  // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;            // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;               // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [106:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;               // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;         // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;             // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;              // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;             // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                // cmd_mux_002:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [105:0] cmd_mux_002_src_data;                                                 // cmd_mux_002:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                              // cmd_mux_002:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                        // cmd_mux_002:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                          // cmd_mux_002:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] intel_niosv_m_0_dm_agent_agent_m0_readdata;                           // intel_niosv_m_0_dm_agent_translator:uav_readdata -> intel_niosv_m_0_dm_agent_agent:m0_readdata
	wire          intel_niosv_m_0_dm_agent_agent_m0_waitrequest;                        // intel_niosv_m_0_dm_agent_translator:uav_waitrequest -> intel_niosv_m_0_dm_agent_agent:m0_waitrequest
	wire          intel_niosv_m_0_dm_agent_agent_m0_debugaccess;                        // intel_niosv_m_0_dm_agent_agent:m0_debugaccess -> intel_niosv_m_0_dm_agent_translator:uav_debugaccess
	wire   [31:0] intel_niosv_m_0_dm_agent_agent_m0_address;                            // intel_niosv_m_0_dm_agent_agent:m0_address -> intel_niosv_m_0_dm_agent_translator:uav_address
	wire    [3:0] intel_niosv_m_0_dm_agent_agent_m0_byteenable;                         // intel_niosv_m_0_dm_agent_agent:m0_byteenable -> intel_niosv_m_0_dm_agent_translator:uav_byteenable
	wire          intel_niosv_m_0_dm_agent_agent_m0_read;                               // intel_niosv_m_0_dm_agent_agent:m0_read -> intel_niosv_m_0_dm_agent_translator:uav_read
	wire          intel_niosv_m_0_dm_agent_agent_m0_readdatavalid;                      // intel_niosv_m_0_dm_agent_translator:uav_readdatavalid -> intel_niosv_m_0_dm_agent_agent:m0_readdatavalid
	wire          intel_niosv_m_0_dm_agent_agent_m0_lock;                               // intel_niosv_m_0_dm_agent_agent:m0_lock -> intel_niosv_m_0_dm_agent_translator:uav_lock
	wire   [31:0] intel_niosv_m_0_dm_agent_agent_m0_writedata;                          // intel_niosv_m_0_dm_agent_agent:m0_writedata -> intel_niosv_m_0_dm_agent_translator:uav_writedata
	wire          intel_niosv_m_0_dm_agent_agent_m0_write;                              // intel_niosv_m_0_dm_agent_agent:m0_write -> intel_niosv_m_0_dm_agent_translator:uav_write
	wire    [2:0] intel_niosv_m_0_dm_agent_agent_m0_burstcount;                         // intel_niosv_m_0_dm_agent_agent:m0_burstcount -> intel_niosv_m_0_dm_agent_translator:uav_burstcount
	wire          intel_niosv_m_0_dm_agent_agent_rf_source_valid;                       // intel_niosv_m_0_dm_agent_agent:rf_source_valid -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_valid
	wire  [106:0] intel_niosv_m_0_dm_agent_agent_rf_source_data;                        // intel_niosv_m_0_dm_agent_agent:rf_source_data -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_data
	wire          intel_niosv_m_0_dm_agent_agent_rf_source_ready;                       // intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_ready -> intel_niosv_m_0_dm_agent_agent:rf_source_ready
	wire          intel_niosv_m_0_dm_agent_agent_rf_source_startofpacket;               // intel_niosv_m_0_dm_agent_agent:rf_source_startofpacket -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_startofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rf_source_endofpacket;                 // intel_niosv_m_0_dm_agent_agent:rf_source_endofpacket -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:in_endofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_valid;                    // intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_valid -> intel_niosv_m_0_dm_agent_agent:rf_sink_valid
	wire  [106:0] intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_data;                     // intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_data -> intel_niosv_m_0_dm_agent_agent:rf_sink_data
	wire          intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_ready;                    // intel_niosv_m_0_dm_agent_agent:rf_sink_ready -> intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_ready
	wire          intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_startofpacket;            // intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_startofpacket -> intel_niosv_m_0_dm_agent_agent:rf_sink_startofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_endofpacket;              // intel_niosv_m_0_dm_agent_agent_rsp_fifo:out_endofpacket -> intel_niosv_m_0_dm_agent_agent:rf_sink_endofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_valid;                  // intel_niosv_m_0_dm_agent_agent:rdata_fifo_src_valid -> intel_niosv_m_0_dm_agent_agent_rdata_fifo:in_valid
	wire   [33:0] intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_data;                   // intel_niosv_m_0_dm_agent_agent:rdata_fifo_src_data -> intel_niosv_m_0_dm_agent_agent_rdata_fifo:in_data
	wire          intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_ready;                  // intel_niosv_m_0_dm_agent_agent_rdata_fifo:in_ready -> intel_niosv_m_0_dm_agent_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                // cmd_mux_003:src_valid -> intel_niosv_m_0_dm_agent_agent:cp_valid
	wire  [105:0] cmd_mux_003_src_data;                                                 // cmd_mux_003:src_data -> intel_niosv_m_0_dm_agent_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                // intel_niosv_m_0_dm_agent_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                              // cmd_mux_003:src_channel -> intel_niosv_m_0_dm_agent_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                        // cmd_mux_003:src_startofpacket -> intel_niosv_m_0_dm_agent_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                          // cmd_mux_003:src_endofpacket -> intel_niosv_m_0_dm_agent_agent:cp_endofpacket
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                             // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                             // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s1_agent_m0_address;                                 // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                              // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                    // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                           // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                    // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                               // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                   // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                              // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                            // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [106:0] onchip_memory2_0_s1_agent_rf_source_data;                             // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                            // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                    // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                      // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                         // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [106:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                          // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                         // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                 // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                   // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                       // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> onchip_memory2_0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                        // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> onchip_memory2_0_s1_agent_rdata_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                       // onchip_memory2_0_s1_agent_rdata_fifo:in_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                // cmd_mux_004:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [105:0] cmd_mux_004_src_data;                                                 // cmd_mux_004:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                              // cmd_mux_004:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                        // cmd_mux_004:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                          // cmd_mux_004:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire   [31:0] intel_niosv_m_0_timer_sw_agent_agent_m0_readdata;                     // intel_niosv_m_0_timer_sw_agent_translator:uav_readdata -> intel_niosv_m_0_timer_sw_agent_agent:m0_readdata
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_waitrequest;                  // intel_niosv_m_0_timer_sw_agent_translator:uav_waitrequest -> intel_niosv_m_0_timer_sw_agent_agent:m0_waitrequest
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_debugaccess;                  // intel_niosv_m_0_timer_sw_agent_agent:m0_debugaccess -> intel_niosv_m_0_timer_sw_agent_translator:uav_debugaccess
	wire   [31:0] intel_niosv_m_0_timer_sw_agent_agent_m0_address;                      // intel_niosv_m_0_timer_sw_agent_agent:m0_address -> intel_niosv_m_0_timer_sw_agent_translator:uav_address
	wire    [3:0] intel_niosv_m_0_timer_sw_agent_agent_m0_byteenable;                   // intel_niosv_m_0_timer_sw_agent_agent:m0_byteenable -> intel_niosv_m_0_timer_sw_agent_translator:uav_byteenable
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_read;                         // intel_niosv_m_0_timer_sw_agent_agent:m0_read -> intel_niosv_m_0_timer_sw_agent_translator:uav_read
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_readdatavalid;                // intel_niosv_m_0_timer_sw_agent_translator:uav_readdatavalid -> intel_niosv_m_0_timer_sw_agent_agent:m0_readdatavalid
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_lock;                         // intel_niosv_m_0_timer_sw_agent_agent:m0_lock -> intel_niosv_m_0_timer_sw_agent_translator:uav_lock
	wire   [31:0] intel_niosv_m_0_timer_sw_agent_agent_m0_writedata;                    // intel_niosv_m_0_timer_sw_agent_agent:m0_writedata -> intel_niosv_m_0_timer_sw_agent_translator:uav_writedata
	wire          intel_niosv_m_0_timer_sw_agent_agent_m0_write;                        // intel_niosv_m_0_timer_sw_agent_agent:m0_write -> intel_niosv_m_0_timer_sw_agent_translator:uav_write
	wire    [2:0] intel_niosv_m_0_timer_sw_agent_agent_m0_burstcount;                   // intel_niosv_m_0_timer_sw_agent_agent:m0_burstcount -> intel_niosv_m_0_timer_sw_agent_translator:uav_burstcount
	wire          intel_niosv_m_0_timer_sw_agent_agent_rf_source_valid;                 // intel_niosv_m_0_timer_sw_agent_agent:rf_source_valid -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_valid
	wire  [106:0] intel_niosv_m_0_timer_sw_agent_agent_rf_source_data;                  // intel_niosv_m_0_timer_sw_agent_agent:rf_source_data -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rf_source_ready;                 // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_ready -> intel_niosv_m_0_timer_sw_agent_agent:rf_source_ready
	wire          intel_niosv_m_0_timer_sw_agent_agent_rf_source_startofpacket;         // intel_niosv_m_0_timer_sw_agent_agent:rf_source_startofpacket -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_startofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rf_source_endofpacket;           // intel_niosv_m_0_timer_sw_agent_agent:rf_source_endofpacket -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:in_endofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_valid;              // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_valid -> intel_niosv_m_0_timer_sw_agent_agent:rf_sink_valid
	wire  [106:0] intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_data;               // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_data -> intel_niosv_m_0_timer_sw_agent_agent:rf_sink_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_ready;              // intel_niosv_m_0_timer_sw_agent_agent:rf_sink_ready -> intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_ready
	wire          intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_startofpacket;      // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_startofpacket -> intel_niosv_m_0_timer_sw_agent_agent:rf_sink_startofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_endofpacket;        // intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo:out_endofpacket -> intel_niosv_m_0_timer_sw_agent_agent:rf_sink_endofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_valid;            // intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_src_valid -> intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:in_valid
	wire   [33:0] intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_data;             // intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_src_data -> intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:in_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_ready;            // intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:in_ready -> intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                // cmd_mux_005:src_valid -> intel_niosv_m_0_timer_sw_agent_agent:cp_valid
	wire  [105:0] cmd_mux_005_src_data;                                                 // cmd_mux_005:src_data -> intel_niosv_m_0_timer_sw_agent_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                // intel_niosv_m_0_timer_sw_agent_agent:cp_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                              // cmd_mux_005:src_channel -> intel_niosv_m_0_timer_sw_agent_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                        // cmd_mux_005:src_startofpacket -> intel_niosv_m_0_timer_sw_agent_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                          // cmd_mux_005:src_endofpacket -> intel_niosv_m_0_timer_sw_agent_agent:cp_endofpacket
	wire          intel_niosv_m_0_data_manager_agent_write_cp_valid;                    // intel_niosv_m_0_data_manager_agent:write_cp_valid -> router:sink_valid
	wire  [105:0] intel_niosv_m_0_data_manager_agent_write_cp_data;                     // intel_niosv_m_0_data_manager_agent:write_cp_data -> router:sink_data
	wire          intel_niosv_m_0_data_manager_agent_write_cp_ready;                    // router:sink_ready -> intel_niosv_m_0_data_manager_agent:write_cp_ready
	wire          intel_niosv_m_0_data_manager_agent_write_cp_startofpacket;            // intel_niosv_m_0_data_manager_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          intel_niosv_m_0_data_manager_agent_write_cp_endofpacket;              // intel_niosv_m_0_data_manager_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                     // router:src_valid -> cmd_demux:sink_valid
	wire  [105:0] router_src_data;                                                      // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                     // cmd_demux:sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                                   // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                             // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                               // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          intel_niosv_m_0_data_manager_agent_read_cp_valid;                     // intel_niosv_m_0_data_manager_agent:read_cp_valid -> router_001:sink_valid
	wire  [105:0] intel_niosv_m_0_data_manager_agent_read_cp_data;                      // intel_niosv_m_0_data_manager_agent:read_cp_data -> router_001:sink_data
	wire          intel_niosv_m_0_data_manager_agent_read_cp_ready;                     // router_001:sink_ready -> intel_niosv_m_0_data_manager_agent:read_cp_ready
	wire          intel_niosv_m_0_data_manager_agent_read_cp_startofpacket;             // intel_niosv_m_0_data_manager_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          intel_niosv_m_0_data_manager_agent_read_cp_endofpacket;               // intel_niosv_m_0_data_manager_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                 // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [105:0] router_001_src_data;                                                  // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                 // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                               // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                         // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                           // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          intel_niosv_m_0_instruction_manager_agent_write_cp_valid;             // intel_niosv_m_0_instruction_manager_agent:write_cp_valid -> router_002:sink_valid
	wire  [105:0] intel_niosv_m_0_instruction_manager_agent_write_cp_data;              // intel_niosv_m_0_instruction_manager_agent:write_cp_data -> router_002:sink_data
	wire          intel_niosv_m_0_instruction_manager_agent_write_cp_ready;             // router_002:sink_ready -> intel_niosv_m_0_instruction_manager_agent:write_cp_ready
	wire          intel_niosv_m_0_instruction_manager_agent_write_cp_startofpacket;     // intel_niosv_m_0_instruction_manager_agent:write_cp_startofpacket -> router_002:sink_startofpacket
	wire          intel_niosv_m_0_instruction_manager_agent_write_cp_endofpacket;       // intel_niosv_m_0_instruction_manager_agent:write_cp_endofpacket -> router_002:sink_endofpacket
	wire          intel_niosv_m_0_instruction_manager_agent_read_cp_valid;              // intel_niosv_m_0_instruction_manager_agent:read_cp_valid -> router_003:sink_valid
	wire  [105:0] intel_niosv_m_0_instruction_manager_agent_read_cp_data;               // intel_niosv_m_0_instruction_manager_agent:read_cp_data -> router_003:sink_data
	wire          intel_niosv_m_0_instruction_manager_agent_read_cp_ready;              // router_003:sink_ready -> intel_niosv_m_0_instruction_manager_agent:read_cp_ready
	wire          intel_niosv_m_0_instruction_manager_agent_read_cp_startofpacket;      // intel_niosv_m_0_instruction_manager_agent:read_cp_startofpacket -> router_003:sink_startofpacket
	wire          intel_niosv_m_0_instruction_manager_agent_read_cp_endofpacket;        // intel_niosv_m_0_instruction_manager_agent:read_cp_endofpacket -> router_003:sink_endofpacket
	wire          aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_valid;                  // AES_AXI_0_AES_axi4lite_slave_1_agent:write_rp_valid -> router_004:sink_valid
	wire  [105:0] aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_data;                   // AES_AXI_0_AES_axi4lite_slave_1_agent:write_rp_data -> router_004:sink_data
	wire          aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_ready;                  // router_004:sink_ready -> AES_AXI_0_AES_axi4lite_slave_1_agent:write_rp_ready
	wire          aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_startofpacket;          // AES_AXI_0_AES_axi4lite_slave_1_agent:write_rp_startofpacket -> router_004:sink_startofpacket
	wire          aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_endofpacket;            // AES_AXI_0_AES_axi4lite_slave_1_agent:write_rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                 // router_004:src_valid -> rsp_demux:sink_valid
	wire  [105:0] router_004_src_data;                                                  // router_004:src_data -> rsp_demux:sink_data
	wire          router_004_src_ready;                                                 // rsp_demux:sink_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                               // router_004:src_channel -> rsp_demux:sink_channel
	wire          router_004_src_startofpacket;                                         // router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_004_src_endofpacket;                                           // router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_valid;                   // AES_AXI_0_AES_axi4lite_slave_1_agent:read_rp_valid -> router_005:sink_valid
	wire  [105:0] aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_data;                    // AES_AXI_0_AES_axi4lite_slave_1_agent:read_rp_data -> router_005:sink_data
	wire          aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_ready;                   // router_005:sink_ready -> AES_AXI_0_AES_axi4lite_slave_1_agent:read_rp_ready
	wire          aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_startofpacket;           // AES_AXI_0_AES_axi4lite_slave_1_agent:read_rp_startofpacket -> router_005:sink_startofpacket
	wire          aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_endofpacket;             // AES_AXI_0_AES_axi4lite_slave_1_agent:read_rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                 // router_005:src_valid -> rsp_demux_001:sink_valid
	wire  [105:0] router_005_src_data;                                                  // router_005:src_data -> rsp_demux_001:sink_data
	wire          router_005_src_ready;                                                 // rsp_demux_001:sink_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                               // router_005:src_channel -> rsp_demux_001:sink_channel
	wire          router_005_src_startofpacket;                                         // router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_005_src_endofpacket;                                           // router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                         // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_006:sink_valid
	wire  [105:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                          // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_006:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                         // router_006:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                 // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                   // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                 // router_006:src_valid -> rsp_demux_002:sink_valid
	wire  [105:0] router_006_src_data;                                                  // router_006:src_data -> rsp_demux_002:sink_data
	wire          router_006_src_ready;                                                 // rsp_demux_002:sink_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                               // router_006:src_channel -> rsp_demux_002:sink_channel
	wire          router_006_src_startofpacket;                                         // router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_006_src_endofpacket;                                           // router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rp_valid;                              // intel_niosv_m_0_dm_agent_agent:rp_valid -> router_007:sink_valid
	wire  [105:0] intel_niosv_m_0_dm_agent_agent_rp_data;                               // intel_niosv_m_0_dm_agent_agent:rp_data -> router_007:sink_data
	wire          intel_niosv_m_0_dm_agent_agent_rp_ready;                              // router_007:sink_ready -> intel_niosv_m_0_dm_agent_agent:rp_ready
	wire          intel_niosv_m_0_dm_agent_agent_rp_startofpacket;                      // intel_niosv_m_0_dm_agent_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          intel_niosv_m_0_dm_agent_agent_rp_endofpacket;                        // intel_niosv_m_0_dm_agent_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                 // router_007:src_valid -> rsp_demux_003:sink_valid
	wire  [105:0] router_007_src_data;                                                  // router_007:src_data -> rsp_demux_003:sink_data
	wire          router_007_src_ready;                                                 // rsp_demux_003:sink_ready -> router_007:src_ready
	wire    [5:0] router_007_src_channel;                                               // router_007:src_channel -> rsp_demux_003:sink_channel
	wire          router_007_src_startofpacket;                                         // router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_007_src_endofpacket;                                           // router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                   // onchip_memory2_0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [105:0] onchip_memory2_0_s1_agent_rp_data;                                    // onchip_memory2_0_s1_agent:rp_data -> router_008:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                   // router_008:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                           // onchip_memory2_0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                             // onchip_memory2_0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                 // router_008:src_valid -> rsp_demux_004:sink_valid
	wire  [105:0] router_008_src_data;                                                  // router_008:src_data -> rsp_demux_004:sink_data
	wire          router_008_src_ready;                                                 // rsp_demux_004:sink_ready -> router_008:src_ready
	wire    [5:0] router_008_src_channel;                                               // router_008:src_channel -> rsp_demux_004:sink_channel
	wire          router_008_src_startofpacket;                                         // router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_008_src_endofpacket;                                           // router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rp_valid;                        // intel_niosv_m_0_timer_sw_agent_agent:rp_valid -> router_009:sink_valid
	wire  [105:0] intel_niosv_m_0_timer_sw_agent_agent_rp_data;                         // intel_niosv_m_0_timer_sw_agent_agent:rp_data -> router_009:sink_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rp_ready;                        // router_009:sink_ready -> intel_niosv_m_0_timer_sw_agent_agent:rp_ready
	wire          intel_niosv_m_0_timer_sw_agent_agent_rp_startofpacket;                // intel_niosv_m_0_timer_sw_agent_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          intel_niosv_m_0_timer_sw_agent_agent_rp_endofpacket;                  // intel_niosv_m_0_timer_sw_agent_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                 // router_009:src_valid -> rsp_demux_005:sink_valid
	wire  [105:0] router_009_src_data;                                                  // router_009:src_data -> rsp_demux_005:sink_data
	wire          router_009_src_ready;                                                 // rsp_demux_005:sink_ready -> router_009:src_ready
	wire    [5:0] router_009_src_channel;                                               // router_009:src_channel -> rsp_demux_005:sink_channel
	wire          router_009_src_startofpacket;                                         // router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_009_src_endofpacket;                                           // router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_002_src_valid;                                                 // router_002:src_valid -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_valid
	wire  [105:0] router_002_src_data;                                                  // router_002:src_data -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                 // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                               // router_002:src_channel -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                         // router_002:src_startofpacket -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                           // router_002:src_endofpacket -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_sink_endofpacket
	wire  [105:0] intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_data;          // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_ready;         // cmd_demux_002:sink_ready -> intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_ready
	wire    [5:0] intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_channel;       // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_startofpacket; // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_endofpacket;   // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                // rsp_mux_002:src_valid -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_002_src_data;                                                 // rsp_mux_002:src_data -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [5:0] rsp_mux_002_src_channel;                                              // rsp_mux_002:src_channel -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                        // rsp_mux_002:src_startofpacket -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                          // rsp_mux_002:src_endofpacket -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_sink_endofpacket
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_valid;         // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_valid -> intel_niosv_m_0_instruction_manager_agent:write_rp_valid
	wire  [105:0] intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_data;          // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_data -> intel_niosv_m_0_instruction_manager_agent:write_rp_data
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_ready;         // intel_niosv_m_0_instruction_manager_agent:write_rp_ready -> intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_ready
	wire    [5:0] intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_channel;       // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_channel -> intel_niosv_m_0_instruction_manager_agent:write_rp_channel
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_startofpacket; // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_startofpacket -> intel_niosv_m_0_instruction_manager_agent:write_rp_startofpacket
	wire          intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_endofpacket;   // intel_niosv_m_0_instruction_manager_wr_limiter:rsp_src_endofpacket -> intel_niosv_m_0_instruction_manager_agent:write_rp_endofpacket
	wire          router_003_src_valid;                                                 // router_003:src_valid -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_valid
	wire  [105:0] router_003_src_data;                                                  // router_003:src_data -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                 // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                               // router_003:src_channel -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                         // router_003:src_startofpacket -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                           // router_003:src_endofpacket -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_sink_endofpacket
	wire  [105:0] intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_data;          // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_ready;         // cmd_demux_003:sink_ready -> intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_ready
	wire    [5:0] intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_channel;       // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_startofpacket; // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_endofpacket;   // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                // rsp_mux_003:src_valid -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_valid
	wire  [105:0] rsp_mux_003_src_data;                                                 // rsp_mux_003:src_data -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire    [5:0] rsp_mux_003_src_channel;                                              // rsp_mux_003:src_channel -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                        // rsp_mux_003:src_startofpacket -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                          // rsp_mux_003:src_endofpacket -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_sink_endofpacket
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_valid;         // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_valid -> intel_niosv_m_0_instruction_manager_agent:read_rp_valid
	wire  [105:0] intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_data;          // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_data -> intel_niosv_m_0_instruction_manager_agent:read_rp_data
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_ready;         // intel_niosv_m_0_instruction_manager_agent:read_rp_ready -> intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_ready
	wire    [5:0] intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_channel;       // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_channel -> intel_niosv_m_0_instruction_manager_agent:read_rp_channel
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_startofpacket; // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_startofpacket -> intel_niosv_m_0_instruction_manager_agent:read_rp_startofpacket
	wire          intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_endofpacket;   // intel_niosv_m_0_instruction_manager_rd_limiter:rsp_src_endofpacket -> intel_niosv_m_0_instruction_manager_agent:read_rp_endofpacket
	wire          cmd_demux_src0_valid;                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [105:0] cmd_demux_src0_data;                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                 // cmd_demux:src1_valid -> cmd_mux_002:sink0_valid
	wire  [105:0] cmd_demux_src1_data;                                                  // cmd_demux:src1_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src1_ready;                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                               // cmd_demux:src1_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                         // cmd_demux:src1_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                           // cmd_demux:src1_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                 // cmd_demux:src2_valid -> cmd_mux_003:sink0_valid
	wire  [105:0] cmd_demux_src2_data;                                                  // cmd_demux:src2_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src2_ready;                                                 // cmd_mux_003:sink0_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                               // cmd_demux:src2_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                         // cmd_demux:src2_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                           // cmd_demux:src2_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                 // cmd_demux:src3_valid -> cmd_mux_004:sink0_valid
	wire  [105:0] cmd_demux_src3_data;                                                  // cmd_demux:src3_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src3_ready;                                                 // cmd_mux_004:sink0_ready -> cmd_demux:src3_ready
	wire    [5:0] cmd_demux_src3_channel;                                               // cmd_demux:src3_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                         // cmd_demux:src3_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                           // cmd_demux:src3_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                 // cmd_demux:src4_valid -> cmd_mux_005:sink0_valid
	wire  [105:0] cmd_demux_src4_data;                                                  // cmd_demux:src4_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src4_ready;                                                 // cmd_mux_005:sink0_ready -> cmd_demux:src4_ready
	wire    [5:0] cmd_demux_src4_channel;                                               // cmd_demux:src4_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                         // cmd_demux:src4_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                           // cmd_demux:src4_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                             // cmd_demux_001:src0_valid -> cmd_mux_001:sink0_valid
	wire  [105:0] cmd_demux_001_src0_data;                                              // cmd_demux_001:src0_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_001_src0_ready;                                             // cmd_mux_001:sink0_ready -> cmd_demux_001:src0_ready
	wire    [5:0] cmd_demux_001_src0_channel;                                           // cmd_demux_001:src0_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_001_src0_startofpacket;                                     // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                       // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                             // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire  [105:0] cmd_demux_001_src1_data;                                              // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src1_ready;                                             // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire    [5:0] cmd_demux_001_src1_channel;                                           // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                     // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                       // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                             // cmd_demux_001:src2_valid -> cmd_mux_003:sink1_valid
	wire  [105:0] cmd_demux_001_src2_data;                                              // cmd_demux_001:src2_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src2_ready;                                             // cmd_mux_003:sink1_ready -> cmd_demux_001:src2_ready
	wire    [5:0] cmd_demux_001_src2_channel;                                           // cmd_demux_001:src2_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                     // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                       // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                             // cmd_demux_001:src3_valid -> cmd_mux_004:sink1_valid
	wire  [105:0] cmd_demux_001_src3_data;                                              // cmd_demux_001:src3_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src3_ready;                                             // cmd_mux_004:sink1_ready -> cmd_demux_001:src3_ready
	wire    [5:0] cmd_demux_001_src3_channel;                                           // cmd_demux_001:src3_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                     // cmd_demux_001:src3_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                       // cmd_demux_001:src3_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                             // cmd_demux_001:src4_valid -> cmd_mux_005:sink1_valid
	wire  [105:0] cmd_demux_001_src4_data;                                              // cmd_demux_001:src4_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src4_ready;                                             // cmd_mux_005:sink1_ready -> cmd_demux_001:src4_ready
	wire    [5:0] cmd_demux_001_src4_channel;                                           // cmd_demux_001:src4_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                     // cmd_demux_001:src4_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                       // cmd_demux_001:src4_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                             // cmd_demux_002:src0_valid -> cmd_mux_003:sink2_valid
	wire  [105:0] cmd_demux_002_src0_data;                                              // cmd_demux_002:src0_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src0_ready;                                             // cmd_mux_003:sink2_ready -> cmd_demux_002:src0_ready
	wire    [5:0] cmd_demux_002_src0_channel;                                           // cmd_demux_002:src0_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                     // cmd_demux_002:src0_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                       // cmd_demux_002:src0_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                             // cmd_demux_002:src1_valid -> cmd_mux_004:sink2_valid
	wire  [105:0] cmd_demux_002_src1_data;                                              // cmd_demux_002:src1_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_002_src1_ready;                                             // cmd_mux_004:sink2_ready -> cmd_demux_002:src1_ready
	wire    [5:0] cmd_demux_002_src1_channel;                                           // cmd_demux_002:src1_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                     // cmd_demux_002:src1_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                       // cmd_demux_002:src1_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                             // cmd_demux_003:src0_valid -> cmd_mux_003:sink3_valid
	wire  [105:0] cmd_demux_003_src0_data;                                              // cmd_demux_003:src0_data -> cmd_mux_003:sink3_data
	wire          cmd_demux_003_src0_ready;                                             // cmd_mux_003:sink3_ready -> cmd_demux_003:src0_ready
	wire    [5:0] cmd_demux_003_src0_channel;                                           // cmd_demux_003:src0_channel -> cmd_mux_003:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                     // cmd_demux_003:src0_startofpacket -> cmd_mux_003:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                       // cmd_demux_003:src0_endofpacket -> cmd_mux_003:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                             // cmd_demux_003:src1_valid -> cmd_mux_004:sink3_valid
	wire  [105:0] cmd_demux_003_src1_data;                                              // cmd_demux_003:src1_data -> cmd_mux_004:sink3_data
	wire          cmd_demux_003_src1_ready;                                             // cmd_mux_004:sink3_ready -> cmd_demux_003:src1_ready
	wire    [5:0] cmd_demux_003_src1_channel;                                           // cmd_demux_003:src1_channel -> cmd_mux_004:sink3_channel
	wire          cmd_demux_003_src1_startofpacket;                                     // cmd_demux_003:src1_startofpacket -> cmd_mux_004:sink3_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                       // cmd_demux_003:src1_endofpacket -> cmd_mux_004:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [105:0] rsp_demux_src0_data;                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                             // rsp_demux_001:src0_valid -> rsp_mux_001:sink0_valid
	wire  [105:0] rsp_demux_001_src0_data;                                              // rsp_demux_001:src0_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src0_ready;                                             // rsp_mux_001:sink0_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                           // rsp_demux_001:src0_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src0_startofpacket;                                     // rsp_demux_001:src0_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                       // rsp_demux_001:src0_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                             // rsp_demux_002:src0_valid -> rsp_mux:sink1_valid
	wire  [105:0] rsp_demux_002_src0_data;                                              // rsp_demux_002:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_002_src0_ready;                                             // rsp_mux:sink1_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                           // rsp_demux_002:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_002_src0_startofpacket;                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                             // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire  [105:0] rsp_demux_002_src1_data;                                              // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_002_src1_ready;                                             // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire    [5:0] rsp_demux_002_src1_channel;                                           // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_002_src1_startofpacket;                                     // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                       // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src0_valid;                                             // rsp_demux_003:src0_valid -> rsp_mux:sink2_valid
	wire  [105:0] rsp_demux_003_src0_data;                                              // rsp_demux_003:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_003_src0_ready;                                             // rsp_mux:sink2_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                           // rsp_demux_003:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_003_src0_startofpacket;                                     // rsp_demux_003:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                       // rsp_demux_003:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src1_valid;                                             // rsp_demux_003:src1_valid -> rsp_mux_001:sink2_valid
	wire  [105:0] rsp_demux_003_src1_data;                                              // rsp_demux_003:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_003_src1_ready;                                             // rsp_mux_001:sink2_ready -> rsp_demux_003:src1_ready
	wire    [5:0] rsp_demux_003_src1_channel;                                           // rsp_demux_003:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_003_src1_startofpacket;                                     // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                       // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src2_valid;                                             // rsp_demux_003:src2_valid -> rsp_mux_002:sink0_valid
	wire  [105:0] rsp_demux_003_src2_data;                                              // rsp_demux_003:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_003_src2_ready;                                             // rsp_mux_002:sink0_ready -> rsp_demux_003:src2_ready
	wire    [5:0] rsp_demux_003_src2_channel;                                           // rsp_demux_003:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_003_src2_startofpacket;                                     // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                       // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_003_src3_valid;                                             // rsp_demux_003:src3_valid -> rsp_mux_003:sink0_valid
	wire  [105:0] rsp_demux_003_src3_data;                                              // rsp_demux_003:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_003_src3_ready;                                             // rsp_mux_003:sink0_ready -> rsp_demux_003:src3_ready
	wire    [5:0] rsp_demux_003_src3_channel;                                           // rsp_demux_003:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_003_src3_startofpacket;                                     // rsp_demux_003:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_003_src3_endofpacket;                                       // rsp_demux_003:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                             // rsp_demux_004:src0_valid -> rsp_mux:sink3_valid
	wire  [105:0] rsp_demux_004_src0_data;                                              // rsp_demux_004:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_004_src0_ready;                                             // rsp_mux:sink3_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                           // rsp_demux_004:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_004_src0_startofpacket;                                     // rsp_demux_004:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                       // rsp_demux_004:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src1_valid;                                             // rsp_demux_004:src1_valid -> rsp_mux_001:sink3_valid
	wire  [105:0] rsp_demux_004_src1_data;                                              // rsp_demux_004:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_004_src1_ready;                                             // rsp_mux_001:sink3_ready -> rsp_demux_004:src1_ready
	wire    [5:0] rsp_demux_004_src1_channel;                                           // rsp_demux_004:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_004_src1_startofpacket;                                     // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                       // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src2_valid;                                             // rsp_demux_004:src2_valid -> rsp_mux_002:sink1_valid
	wire  [105:0] rsp_demux_004_src2_data;                                              // rsp_demux_004:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_004_src2_ready;                                             // rsp_mux_002:sink1_ready -> rsp_demux_004:src2_ready
	wire    [5:0] rsp_demux_004_src2_channel;                                           // rsp_demux_004:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_004_src2_startofpacket;                                     // rsp_demux_004:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                       // rsp_demux_004:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_004_src3_valid;                                             // rsp_demux_004:src3_valid -> rsp_mux_003:sink1_valid
	wire  [105:0] rsp_demux_004_src3_data;                                              // rsp_demux_004:src3_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_004_src3_ready;                                             // rsp_mux_003:sink1_ready -> rsp_demux_004:src3_ready
	wire    [5:0] rsp_demux_004_src3_channel;                                           // rsp_demux_004:src3_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_004_src3_startofpacket;                                     // rsp_demux_004:src3_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_004_src3_endofpacket;                                       // rsp_demux_004:src3_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                             // rsp_demux_005:src0_valid -> rsp_mux:sink4_valid
	wire  [105:0] rsp_demux_005_src0_data;                                              // rsp_demux_005:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_005_src0_ready;                                             // rsp_mux:sink4_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                           // rsp_demux_005:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_005_src0_startofpacket;                                     // rsp_demux_005:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                       // rsp_demux_005:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src1_valid;                                             // rsp_demux_005:src1_valid -> rsp_mux_001:sink4_valid
	wire  [105:0] rsp_demux_005_src1_data;                                              // rsp_demux_005:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_005_src1_ready;                                             // rsp_mux_001:sink4_ready -> rsp_demux_005:src1_ready
	wire    [5:0] rsp_demux_005_src1_channel;                                           // rsp_demux_005:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_005_src1_startofpacket;                                     // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                       // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire    [5:0] intel_niosv_m_0_instruction_manager_wr_limiter_cmd_valid_data;        // intel_niosv_m_0_instruction_manager_wr_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire    [5:0] intel_niosv_m_0_instruction_manager_rd_limiter_cmd_valid_data;        // intel_niosv_m_0_instruction_manager_rd_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;             // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;              // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;             // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                        // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                         // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                        // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                        // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_valid;                  // intel_niosv_m_0_dm_agent_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_data;                   // intel_niosv_m_0_dm_agent_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_001:in_0_ready -> intel_niosv_m_0_dm_agent_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                    // avalon_st_adapter_001:out_0_valid -> intel_niosv_m_0_dm_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                     // avalon_st_adapter_001:out_0_data -> intel_niosv_m_0_dm_agent_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                    // intel_niosv_m_0_dm_agent_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                    // avalon_st_adapter_001:out_0_error -> intel_niosv_m_0_dm_agent_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_valid;                       // onchip_memory2_0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_out_data;                        // onchip_memory2_0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_out_ready;                       // avalon_st_adapter_002:in_0_ready -> onchip_memory2_0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                    // avalon_st_adapter_002:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                     // avalon_st_adapter_002:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                    // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                    // avalon_st_adapter_002:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_valid;            // intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_data;             // intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_ready;            // avalon_st_adapter_003:in_0_ready -> intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                    // avalon_st_adapter_003:out_0_valid -> intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                     // avalon_st_adapter_003:out_0_data -> intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                    // intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                    // avalon_st_adapter_003:out_0_error -> intel_niosv_m_0_timer_sw_agent_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) intel_niosv_m_0_dm_agent_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (intel_niosv_m_0_dm_agent_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (intel_niosv_m_0_dm_agent_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (intel_niosv_m_0_dm_agent_agent_m0_read),            //                         .read
		.uav_write              (intel_niosv_m_0_dm_agent_agent_m0_write),           //                         .write
		.uav_waitrequest        (intel_niosv_m_0_dm_agent_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (intel_niosv_m_0_dm_agent_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (intel_niosv_m_0_dm_agent_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (intel_niosv_m_0_dm_agent_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (intel_niosv_m_0_dm_agent_agent_m0_writedata),       //                         .writedata
		.uav_lock               (intel_niosv_m_0_dm_agent_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (intel_niosv_m_0_dm_agent_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (intel_niosv_m_0_dm_agent_address),                  //      avalon_anti_slave_0.address
		.av_write               (intel_niosv_m_0_dm_agent_write),                    //                         .write
		.av_read                (intel_niosv_m_0_dm_agent_read),                     //                         .read
		.av_readdata            (intel_niosv_m_0_dm_agent_readdata),                 //                         .readdata
		.av_writedata           (intel_niosv_m_0_dm_agent_writedata),                //                         .writedata
		.av_readdatavalid       (intel_niosv_m_0_dm_agent_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (intel_niosv_m_0_dm_agent_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                 //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                         //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                      //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                     //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                    //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                    //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                         //                         .clken
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) intel_niosv_m_0_timer_sw_agent_translator (
		.clk                    (clk_0_clk_clk),                                         //                      clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (intel_niosv_m_0_timer_sw_agent_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (intel_niosv_m_0_timer_sw_agent_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (intel_niosv_m_0_timer_sw_agent_agent_m0_read),          //                         .read
		.uav_write              (intel_niosv_m_0_timer_sw_agent_agent_m0_write),         //                         .write
		.uav_waitrequest        (intel_niosv_m_0_timer_sw_agent_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (intel_niosv_m_0_timer_sw_agent_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (intel_niosv_m_0_timer_sw_agent_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (intel_niosv_m_0_timer_sw_agent_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (intel_niosv_m_0_timer_sw_agent_agent_m0_writedata),     //                         .writedata
		.uav_lock               (intel_niosv_m_0_timer_sw_agent_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (intel_niosv_m_0_timer_sw_agent_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (intel_niosv_m_0_timer_sw_agent_address),                //      avalon_anti_slave_0.address
		.av_write               (intel_niosv_m_0_timer_sw_agent_write),                  //                         .write
		.av_read                (intel_niosv_m_0_timer_sw_agent_read),                   //                         .read
		.av_readdata            (intel_niosv_m_0_timer_sw_agent_readdata),               //                         .readdata
		.av_writedata           (intel_niosv_m_0_timer_sw_agent_writedata),              //                         .writedata
		.av_byteenable          (intel_niosv_m_0_timer_sw_agent_byteenable),             //                         .byteenable
		.av_readdatavalid       (intel_niosv_m_0_timer_sw_agent_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (intel_niosv_m_0_timer_sw_agent_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI4Lite"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (1),
		.PKT_BEGIN_BURST           (85),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_QOS_L                 (86),
		.PKT_QOS_H                 (86),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (6),
		.ID                        (0)
	) intel_niosv_m_0_data_manager_agent (
		.aclk                   (clk_0_clk_clk),                                             //              clk.clk
		.aresetn                (~intel_niosv_m_0_reset_reset_bridge_in_reset_reset),        //        clk_reset.reset_n
		.write_cp_valid         (intel_niosv_m_0_data_manager_agent_write_cp_valid),         //         write_cp.valid
		.write_cp_data          (intel_niosv_m_0_data_manager_agent_write_cp_data),          //                 .data
		.write_cp_startofpacket (intel_niosv_m_0_data_manager_agent_write_cp_startofpacket), //                 .startofpacket
		.write_cp_endofpacket   (intel_niosv_m_0_data_manager_agent_write_cp_endofpacket),   //                 .endofpacket
		.write_cp_ready         (intel_niosv_m_0_data_manager_agent_write_cp_ready),         //                 .ready
		.write_rp_valid         (rsp_mux_src_valid),                                         //         write_rp.valid
		.write_rp_data          (rsp_mux_src_data),                                          //                 .data
		.write_rp_channel       (rsp_mux_src_channel),                                       //                 .channel
		.write_rp_startofpacket (rsp_mux_src_startofpacket),                                 //                 .startofpacket
		.write_rp_endofpacket   (rsp_mux_src_endofpacket),                                   //                 .endofpacket
		.write_rp_ready         (rsp_mux_src_ready),                                         //                 .ready
		.read_cp_valid          (intel_niosv_m_0_data_manager_agent_read_cp_valid),          //          read_cp.valid
		.read_cp_data           (intel_niosv_m_0_data_manager_agent_read_cp_data),           //                 .data
		.read_cp_startofpacket  (intel_niosv_m_0_data_manager_agent_read_cp_startofpacket),  //                 .startofpacket
		.read_cp_endofpacket    (intel_niosv_m_0_data_manager_agent_read_cp_endofpacket),    //                 .endofpacket
		.read_cp_ready          (intel_niosv_m_0_data_manager_agent_read_cp_ready),          //                 .ready
		.read_rp_valid          (rsp_mux_001_src_valid),                                     //          read_rp.valid
		.read_rp_data           (rsp_mux_001_src_data),                                      //                 .data
		.read_rp_channel        (rsp_mux_001_src_channel),                                   //                 .channel
		.read_rp_startofpacket  (rsp_mux_001_src_startofpacket),                             //                 .startofpacket
		.read_rp_endofpacket    (rsp_mux_001_src_endofpacket),                               //                 .endofpacket
		.read_rp_ready          (rsp_mux_001_src_ready),                                     //                 .ready
		.awaddr                 (intel_niosv_m_0_data_manager_awaddr),                       // altera_axi_slave.awaddr
		.awprot                 (intel_niosv_m_0_data_manager_awprot),                       //                 .awprot
		.awvalid                (intel_niosv_m_0_data_manager_awvalid),                      //                 .awvalid
		.awready                (intel_niosv_m_0_data_manager_awready),                      //                 .awready
		.wdata                  (intel_niosv_m_0_data_manager_wdata),                        //                 .wdata
		.wstrb                  (intel_niosv_m_0_data_manager_wstrb),                        //                 .wstrb
		.wvalid                 (intel_niosv_m_0_data_manager_wvalid),                       //                 .wvalid
		.wready                 (intel_niosv_m_0_data_manager_wready),                       //                 .wready
		.bresp                  (intel_niosv_m_0_data_manager_bresp),                        //                 .bresp
		.bvalid                 (intel_niosv_m_0_data_manager_bvalid),                       //                 .bvalid
		.bready                 (intel_niosv_m_0_data_manager_bready),                       //                 .bready
		.araddr                 (intel_niosv_m_0_data_manager_araddr),                       //                 .araddr
		.arprot                 (intel_niosv_m_0_data_manager_arprot),                       //                 .arprot
		.arvalid                (intel_niosv_m_0_data_manager_arvalid),                      //                 .arvalid
		.arready                (intel_niosv_m_0_data_manager_arready),                      //                 .arready
		.rdata                  (intel_niosv_m_0_data_manager_rdata),                        //                 .rdata
		.rresp                  (intel_niosv_m_0_data_manager_rresp),                        //                 .rresp
		.rvalid                 (intel_niosv_m_0_data_manager_rvalid),                       //                 .rvalid
		.rready                 (intel_niosv_m_0_data_manager_rready),                       //                 .rready
		.awid                   (1'b0),                                                      //      (terminated)
		.awlen                  (4'b0000),                                                   //      (terminated)
		.awsize                 (3'b010),                                                    //      (terminated)
		.awburst                (2'b01),                                                     //      (terminated)
		.awlock                 (2'b00),                                                     //      (terminated)
		.awcache                (4'b0000),                                                   //      (terminated)
		.awqos                  (4'b0000),                                                   //      (terminated)
		.awregion               (4'b0000),                                                   //      (terminated)
		.awuser                 (1'b0),                                                      //      (terminated)
		.arid                   (1'b0),                                                      //      (terminated)
		.arlen                  (4'b0000),                                                   //      (terminated)
		.arsize                 (3'b010),                                                    //      (terminated)
		.arburst                (2'b01),                                                     //      (terminated)
		.arlock                 (2'b00),                                                     //      (terminated)
		.arcache                (4'b0000),                                                   //      (terminated)
		.arqos                  (4'b0000),                                                   //      (terminated)
		.arregion               (4'b0000),                                                   //      (terminated)
		.aruser                 (1'b0),                                                      //      (terminated)
		.wid                    (1'b0),                                                      //      (terminated)
		.wlast                  (1'b1),                                                      //      (terminated)
		.wuser                  (1'b0),                                                      //      (terminated)
		.bid                    (),                                                          //      (terminated)
		.buser                  (),                                                          //      (terminated)
		.rid                    (),                                                          //      (terminated)
		.rlast                  (),                                                          //      (terminated)
		.ruser                  ()                                                           //      (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (1),
		.ADDR_WIDTH                (32),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI4Lite"),
		.WRITE_ISSUING_CAPABILITY  (1),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (85),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_QOS_L                 (86),
		.PKT_QOS_H                 (86),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (6),
		.ID                        (1)
	) intel_niosv_m_0_instruction_manager_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                   //        clk_reset.reset_n
		.write_cp_valid         (intel_niosv_m_0_instruction_manager_agent_write_cp_valid),             //         write_cp.valid
		.write_cp_data          (intel_niosv_m_0_instruction_manager_agent_write_cp_data),              //                 .data
		.write_cp_startofpacket (intel_niosv_m_0_instruction_manager_agent_write_cp_startofpacket),     //                 .startofpacket
		.write_cp_endofpacket   (intel_niosv_m_0_instruction_manager_agent_write_cp_endofpacket),       //                 .endofpacket
		.write_cp_ready         (intel_niosv_m_0_instruction_manager_agent_write_cp_ready),             //                 .ready
		.write_rp_valid         (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_valid),         //         write_rp.valid
		.write_rp_data          (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_data),          //                 .data
		.write_rp_channel       (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_channel),       //                 .channel
		.write_rp_startofpacket (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_startofpacket), //                 .startofpacket
		.write_rp_endofpacket   (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.write_rp_ready         (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_ready),         //                 .ready
		.read_cp_valid          (intel_niosv_m_0_instruction_manager_agent_read_cp_valid),              //          read_cp.valid
		.read_cp_data           (intel_niosv_m_0_instruction_manager_agent_read_cp_data),               //                 .data
		.read_cp_startofpacket  (intel_niosv_m_0_instruction_manager_agent_read_cp_startofpacket),      //                 .startofpacket
		.read_cp_endofpacket    (intel_niosv_m_0_instruction_manager_agent_read_cp_endofpacket),        //                 .endofpacket
		.read_cp_ready          (intel_niosv_m_0_instruction_manager_agent_read_cp_ready),              //                 .ready
		.read_rp_valid          (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_valid),         //          read_rp.valid
		.read_rp_data           (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_data),          //                 .data
		.read_rp_channel        (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_channel),       //                 .channel
		.read_rp_startofpacket  (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_startofpacket), //                 .startofpacket
		.read_rp_endofpacket    (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_endofpacket),   //                 .endofpacket
		.read_rp_ready          (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_ready),         //                 .ready
		.awaddr                 (intel_niosv_m_0_instruction_manager_awaddr),                           // altera_axi_slave.awaddr
		.awprot                 (intel_niosv_m_0_instruction_manager_awprot),                           //                 .awprot
		.awvalid                (intel_niosv_m_0_instruction_manager_awvalid),                          //                 .awvalid
		.awready                (intel_niosv_m_0_instruction_manager_awready),                          //                 .awready
		.wdata                  (intel_niosv_m_0_instruction_manager_wdata),                            //                 .wdata
		.wstrb                  (intel_niosv_m_0_instruction_manager_wstrb),                            //                 .wstrb
		.wvalid                 (intel_niosv_m_0_instruction_manager_wvalid),                           //                 .wvalid
		.wready                 (intel_niosv_m_0_instruction_manager_wready),                           //                 .wready
		.bresp                  (intel_niosv_m_0_instruction_manager_bresp),                            //                 .bresp
		.bvalid                 (intel_niosv_m_0_instruction_manager_bvalid),                           //                 .bvalid
		.bready                 (intel_niosv_m_0_instruction_manager_bready),                           //                 .bready
		.araddr                 (intel_niosv_m_0_instruction_manager_araddr),                           //                 .araddr
		.arprot                 (intel_niosv_m_0_instruction_manager_arprot),                           //                 .arprot
		.arvalid                (intel_niosv_m_0_instruction_manager_arvalid),                          //                 .arvalid
		.arready                (intel_niosv_m_0_instruction_manager_arready),                          //                 .arready
		.rdata                  (intel_niosv_m_0_instruction_manager_rdata),                            //                 .rdata
		.rresp                  (intel_niosv_m_0_instruction_manager_rresp),                            //                 .rresp
		.rvalid                 (intel_niosv_m_0_instruction_manager_rvalid),                           //                 .rvalid
		.rready                 (intel_niosv_m_0_instruction_manager_rready),                           //                 .rready
		.awid                   (1'b0),                                                                 //      (terminated)
		.awlen                  (4'b0000),                                                              //      (terminated)
		.awsize                 (3'b010),                                                               //      (terminated)
		.awburst                (2'b01),                                                                //      (terminated)
		.awlock                 (2'b00),                                                                //      (terminated)
		.awcache                (4'b0000),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.awuser                 (1'b0),                                                                 //      (terminated)
		.arid                   (1'b0),                                                                 //      (terminated)
		.arlen                  (4'b0000),                                                              //      (terminated)
		.arsize                 (3'b010),                                                               //      (terminated)
		.arburst                (2'b01),                                                                //      (terminated)
		.arlock                 (2'b00),                                                                //      (terminated)
		.arcache                (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.wid                    (1'b0),                                                                 //      (terminated)
		.wlast                  (1'b1),                                                                 //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.bid                    (),                                                                     //      (terminated)
		.buser                  (),                                                                     //      (terminated)
		.rid                    (),                                                                     //      (terminated)
		.rlast                  (),                                                                     //      (terminated)
		.ruser                  ()                                                                      //      (terminated)
	);

	altera_merlin_axi_slave_ni #(
		.PKT_QOS_H                   (86),
		.PKT_QOS_L                   (86),
		.PKT_THREAD_ID_H             (93),
		.PKT_THREAD_ID_L             (93),
		.PKT_RESPONSE_STATUS_H       (102),
		.PKT_RESPONSE_STATUS_L       (101),
		.PKT_BEGIN_BURST             (85),
		.PKT_CACHE_H                 (100),
		.PKT_CACHE_L                 (97),
		.PKT_DATA_SIDEBAND_H         (84),
		.PKT_DATA_SIDEBAND_L         (84),
		.PKT_ADDR_SIDEBAND_H         (83),
		.PKT_ADDR_SIDEBAND_L         (83),
		.PKT_BURST_TYPE_H            (82),
		.PKT_BURST_TYPE_L            (81),
		.PKT_PROTECTION_H            (96),
		.PKT_PROTECTION_L            (94),
		.PKT_BURST_SIZE_H            (80),
		.PKT_BURST_SIZE_L            (78),
		.PKT_BURSTWRAP_H             (77),
		.PKT_BURSTWRAP_L             (77),
		.PKT_BYTE_CNT_H              (76),
		.PKT_BYTE_CNT_L              (74),
		.PKT_ADDR_H                  (67),
		.PKT_ADDR_L                  (36),
		.PKT_TRANS_EXCLUSIVE         (73),
		.PKT_TRANS_LOCK              (72),
		.PKT_TRANS_COMPRESSED_READ   (68),
		.PKT_TRANS_POSTED            (69),
		.PKT_TRANS_WRITE             (70),
		.PKT_TRANS_READ              (71),
		.PKT_DATA_H                  (31),
		.PKT_DATA_L                  (0),
		.PKT_BYTEEN_H                (35),
		.PKT_BYTEEN_L                (32),
		.PKT_SRC_ID_H                (89),
		.PKT_SRC_ID_L                (87),
		.PKT_DEST_ID_H               (92),
		.PKT_DEST_ID_L               (90),
		.PKT_ORI_BURST_SIZE_L        (103),
		.PKT_ORI_BURST_SIZE_H        (105),
		.ADDR_USER_WIDTH             (1),
		.DATA_USER_WIDTH             (1),
		.ST_DATA_W                   (106),
		.ADDR_WIDTH                  (6),
		.RDATA_WIDTH                 (32),
		.WDATA_WIDTH                 (32),
		.ST_CHANNEL_W                (6),
		.AXI_SLAVE_ID_W              (1),
		.PASS_ID_TO_SLAVE            (0),
		.AXI_VERSION                 ("AXI4Lite"),
		.WRITE_ACCEPTANCE_CAPABILITY (1),
		.READ_ACCEPTANCE_CAPABILITY  (1)
	) aes_axi_0_aes_axi4lite_slave_1_agent (
		.aclk                   (clk_0_clk_clk),                                               //        clock_sink.clk
		.aresetn                (~intel_niosv_m_0_reset_reset_bridge_in_reset_reset),          //        reset_sink.reset_n
		.read_cp_valid          (cmd_mux_001_src_valid),                                       //           read_cp.valid
		.read_cp_ready          (cmd_mux_001_src_ready),                                       //                  .ready
		.read_cp_data           (cmd_mux_001_src_data),                                        //                  .data
		.read_cp_channel        (cmd_mux_001_src_channel),                                     //                  .channel
		.read_cp_startofpacket  (cmd_mux_001_src_startofpacket),                               //                  .startofpacket
		.read_cp_endofpacket    (cmd_mux_001_src_endofpacket),                                 //                  .endofpacket
		.write_cp_ready         (cmd_mux_src_ready),                                           //          write_cp.ready
		.write_cp_valid         (cmd_mux_src_valid),                                           //                  .valid
		.write_cp_data          (cmd_mux_src_data),                                            //                  .data
		.write_cp_channel       (cmd_mux_src_channel),                                         //                  .channel
		.write_cp_startofpacket (cmd_mux_src_startofpacket),                                   //                  .startofpacket
		.write_cp_endofpacket   (cmd_mux_src_endofpacket),                                     //                  .endofpacket
		.read_rp_ready          (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_ready),          //           read_rp.ready
		.read_rp_valid          (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_valid),          //                  .valid
		.read_rp_data           (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_data),           //                  .data
		.read_rp_startofpacket  (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_startofpacket),  //                  .startofpacket
		.read_rp_endofpacket    (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_endofpacket),    //                  .endofpacket
		.write_rp_ready         (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_ready),         //          write_rp.ready
		.write_rp_valid         (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_valid),         //                  .valid
		.write_rp_data          (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_data),          //                  .data
		.write_rp_startofpacket (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_startofpacket), //                  .startofpacket
		.write_rp_endofpacket   (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_endofpacket),   //                  .endofpacket
		.awaddr                 (AES_AXI_0_AES_axi4lite_slave_1_awaddr),                       // altera_axi_master.awaddr
		.awprot                 (AES_AXI_0_AES_axi4lite_slave_1_awprot),                       //                  .awprot
		.awvalid                (AES_AXI_0_AES_axi4lite_slave_1_awvalid),                      //                  .awvalid
		.awready                (AES_AXI_0_AES_axi4lite_slave_1_awready),                      //                  .awready
		.wdata                  (AES_AXI_0_AES_axi4lite_slave_1_wdata),                        //                  .wdata
		.wstrb                  (AES_AXI_0_AES_axi4lite_slave_1_wstrb),                        //                  .wstrb
		.wvalid                 (AES_AXI_0_AES_axi4lite_slave_1_wvalid),                       //                  .wvalid
		.wready                 (AES_AXI_0_AES_axi4lite_slave_1_wready),                       //                  .wready
		.bresp                  (AES_AXI_0_AES_axi4lite_slave_1_bresp),                        //                  .bresp
		.bvalid                 (AES_AXI_0_AES_axi4lite_slave_1_bvalid),                       //                  .bvalid
		.bready                 (AES_AXI_0_AES_axi4lite_slave_1_bready),                       //                  .bready
		.araddr                 (AES_AXI_0_AES_axi4lite_slave_1_araddr),                       //                  .araddr
		.arprot                 (AES_AXI_0_AES_axi4lite_slave_1_arprot),                       //                  .arprot
		.arvalid                (AES_AXI_0_AES_axi4lite_slave_1_arvalid),                      //                  .arvalid
		.arready                (AES_AXI_0_AES_axi4lite_slave_1_arready),                      //                  .arready
		.rdata                  (AES_AXI_0_AES_axi4lite_slave_1_rdata),                        //                  .rdata
		.rresp                  (AES_AXI_0_AES_axi4lite_slave_1_rresp),                        //                  .rresp
		.rvalid                 (AES_AXI_0_AES_axi4lite_slave_1_rvalid),                       //                  .rvalid
		.rready                 (AES_AXI_0_AES_axi4lite_slave_1_rready)                        //                  .rready
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                        //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) intel_niosv_m_0_dm_agent_agent (
		.clk                     (clk_0_clk_clk),                                             //             clk.clk
		.reset                   (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (intel_niosv_m_0_dm_agent_agent_m0_address),                 //              m0.address
		.m0_burstcount           (intel_niosv_m_0_dm_agent_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (intel_niosv_m_0_dm_agent_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (intel_niosv_m_0_dm_agent_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (intel_niosv_m_0_dm_agent_agent_m0_lock),                    //                .lock
		.m0_readdata             (intel_niosv_m_0_dm_agent_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (intel_niosv_m_0_dm_agent_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (intel_niosv_m_0_dm_agent_agent_m0_read),                    //                .read
		.m0_waitrequest          (intel_niosv_m_0_dm_agent_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (intel_niosv_m_0_dm_agent_agent_m0_writedata),               //                .writedata
		.m0_write                (intel_niosv_m_0_dm_agent_agent_m0_write),                   //                .write
		.rp_endofpacket          (intel_niosv_m_0_dm_agent_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (intel_niosv_m_0_dm_agent_agent_rp_ready),                   //                .ready
		.rp_valid                (intel_niosv_m_0_dm_agent_agent_rp_valid),                   //                .valid
		.rp_data                 (intel_niosv_m_0_dm_agent_agent_rp_data),                    //                .data
		.rp_startofpacket        (intel_niosv_m_0_dm_agent_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                   //                .channel
		.rf_sink_ready           (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (intel_niosv_m_0_dm_agent_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (intel_niosv_m_0_dm_agent_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (intel_niosv_m_0_dm_agent_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (intel_niosv_m_0_dm_agent_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (intel_niosv_m_0_dm_agent_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intel_niosv_m_0_dm_agent_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (intel_niosv_m_0_dm_agent_agent_rf_source_data),             //        in.data
		.in_valid          (intel_niosv_m_0_dm_agent_agent_rf_source_valid),            //          .valid
		.in_ready          (intel_niosv_m_0_dm_agent_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (intel_niosv_m_0_dm_agent_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (intel_niosv_m_0_dm_agent_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (intel_niosv_m_0_dm_agent_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intel_niosv_m_0_dm_agent_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                       //       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (intel_niosv_m_0_dm_agent_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (onchip_memory2_0_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_startofpacket  (1'b0),                                              // (terminated)
		.in_endofpacket    (1'b0),                                              // (terminated)
		.out_startofpacket (),                                                  // (terminated)
		.out_endofpacket   (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (105),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (85),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) intel_niosv_m_0_timer_sw_agent_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (intel_niosv_m_0_timer_sw_agent_agent_m0_address),                 //              m0.address
		.m0_burstcount           (intel_niosv_m_0_timer_sw_agent_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (intel_niosv_m_0_timer_sw_agent_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (intel_niosv_m_0_timer_sw_agent_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (intel_niosv_m_0_timer_sw_agent_agent_m0_lock),                    //                .lock
		.m0_readdata             (intel_niosv_m_0_timer_sw_agent_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (intel_niosv_m_0_timer_sw_agent_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (intel_niosv_m_0_timer_sw_agent_agent_m0_read),                    //                .read
		.m0_waitrequest          (intel_niosv_m_0_timer_sw_agent_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (intel_niosv_m_0_timer_sw_agent_agent_m0_writedata),               //                .writedata
		.m0_write                (intel_niosv_m_0_timer_sw_agent_agent_m0_write),                   //                .write
		.rp_endofpacket          (intel_niosv_m_0_timer_sw_agent_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (intel_niosv_m_0_timer_sw_agent_agent_rp_ready),                   //                .ready
		.rp_valid                (intel_niosv_m_0_timer_sw_agent_agent_rp_valid),                   //                .valid
		.rp_data                 (intel_niosv_m_0_timer_sw_agent_agent_rp_data),                    //                .data
		.rp_startofpacket        (intel_niosv_m_0_timer_sw_agent_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                         //                .channel
		.rf_sink_ready           (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (intel_niosv_m_0_timer_sw_agent_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (intel_niosv_m_0_timer_sw_agent_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (intel_niosv_m_0_timer_sw_agent_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (intel_niosv_m_0_timer_sw_agent_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (intel_niosv_m_0_timer_sw_agent_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (intel_niosv_m_0_timer_sw_agent_agent_rf_source_data),             //        in.data
		.in_valid          (intel_niosv_m_0_timer_sw_agent_agent_rf_source_valid),            //          .valid
		.in_ready          (intel_niosv_m_0_timer_sw_agent_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (intel_niosv_m_0_timer_sw_agent_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (intel_niosv_m_0_timer_sw_agent_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (intel_niosv_m_0_timer_sw_agent_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                             //       clk.clk
		.reset             (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	AES_encrypt_mm_interconnect_0_router router (
		.sink_ready         (intel_niosv_m_0_data_manager_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (intel_niosv_m_0_data_manager_agent_write_cp_valid),         //          .valid
		.sink_data          (intel_niosv_m_0_data_manager_agent_write_cp_data),          //          .data
		.sink_startofpacket (intel_niosv_m_0_data_manager_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_data_manager_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_src_ready),                                          //       src.ready
		.src_valid          (router_src_valid),                                          //          .valid
		.src_data           (router_src_data),                                           //          .data
		.src_channel        (router_src_channel),                                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (intel_niosv_m_0_data_manager_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (intel_niosv_m_0_data_manager_agent_read_cp_valid),         //          .valid
		.sink_data          (intel_niosv_m_0_data_manager_agent_read_cp_data),          //          .data
		.sink_startofpacket (intel_niosv_m_0_data_manager_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_data_manager_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_001_src_ready),                                     //       src.ready
		.src_valid          (router_001_src_valid),                                     //          .valid
		.src_data           (router_001_src_data),                                      //          .data
		.src_channel        (router_001_src_channel),                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (intel_niosv_m_0_instruction_manager_agent_write_cp_ready),         //      sink.ready
		.sink_valid         (intel_niosv_m_0_instruction_manager_agent_write_cp_valid),         //          .valid
		.sink_data          (intel_niosv_m_0_instruction_manager_agent_write_cp_data),          //          .data
		.sink_startofpacket (intel_niosv_m_0_instruction_manager_agent_write_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_instruction_manager_agent_write_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //       src.ready
		.src_valid          (router_002_src_valid),                                             //          .valid
		.src_data           (router_002_src_data),                                              //          .data
		.src_channel        (router_002_src_channel),                                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (intel_niosv_m_0_instruction_manager_agent_read_cp_ready),         //      sink.ready
		.sink_valid         (intel_niosv_m_0_instruction_manager_agent_read_cp_valid),         //          .valid
		.sink_data          (intel_niosv_m_0_instruction_manager_agent_read_cp_data),          //          .data
		.sink_startofpacket (intel_niosv_m_0_instruction_manager_agent_read_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_instruction_manager_agent_read_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                   //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_003_src_ready),                                            //       src.ready
		.src_valid          (router_003_src_valid),                                            //          .valid
		.src_data           (router_003_src_data),                                             //          .data
		.src_channel        (router_003_src_channel),                                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                       //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_ready),         //      sink.ready
		.sink_valid         (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_valid),         //          .valid
		.sink_data          (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_data),          //          .data
		.sink_startofpacket (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (aes_axi_0_aes_axi4lite_slave_1_agent_write_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                               //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_004_src_ready),                                        //       src.ready
		.src_valid          (router_004_src_valid),                                        //          .valid
		.src_data           (router_004_src_data),                                         //          .data
		.src_channel        (router_004_src_channel),                                      //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                   //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_ready),         //      sink.ready
		.sink_valid         (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_valid),         //          .valid
		.sink_data          (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_data),          //          .data
		.sink_startofpacket (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (aes_axi_0_aes_axi4lite_slave_1_agent_read_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_005_src_ready),                                       //       src.ready
		.src_valid          (router_005_src_valid),                                       //          .valid
		.src_data           (router_005_src_data),                                        //          .data
		.src_channel        (router_005_src_channel),                                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                  //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_006_src_ready),                                 //       src.ready
		.src_valid          (router_006_src_valid),                                 //          .valid
		.src_data           (router_006_src_data),                                  //          .data
		.src_channel        (router_006_src_channel),                               //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                            //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (intel_niosv_m_0_dm_agent_agent_rp_ready),           //      sink.ready
		.sink_valid         (intel_niosv_m_0_dm_agent_agent_rp_valid),           //          .valid
		.sink_data          (intel_niosv_m_0_dm_agent_agent_rp_data),            //          .data
		.sink_startofpacket (intel_niosv_m_0_dm_agent_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_dm_agent_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                              //       src.ready
		.src_valid          (router_007_src_valid),                              //          .valid
		.src_data           (router_007_src_data),                               //          .data
		.src_channel        (router_007_src_channel),                            //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                         //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_router_007 router_008 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),                //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                              //       src.ready
		.src_valid          (router_008_src_valid),                              //          .valid
		.src_data           (router_008_src_data),                               //          .data
		.src_channel        (router_008_src_channel),                            //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                         //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_router_006 router_009 (
		.sink_ready         (intel_niosv_m_0_timer_sw_agent_agent_rp_ready),         //      sink.ready
		.sink_valid         (intel_niosv_m_0_timer_sw_agent_agent_rp_valid),         //          .valid
		.sink_data          (intel_niosv_m_0_timer_sw_agent_agent_rp_data),          //          .data
		.sink_startofpacket (intel_niosv_m_0_timer_sw_agent_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_timer_sw_agent_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_009_src_ready),                                  //       src.ready
		.src_valid          (router_009_src_valid),                                  //          .valid
		.src_data           (router_009_src_data),                                   //          .data
		.src_channel        (router_009_src_channel),                                //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) intel_niosv_m_0_instruction_manager_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                        //       clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_002_src_data),                                                  //          .data
		.cmd_sink_channel       (router_002_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (intel_niosv_m_0_instruction_manager_wr_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) intel_niosv_m_0_instruction_manager_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                        //       clk.clk
		.reset                  (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                                 //          .valid
		.cmd_sink_data          (router_003_src_data),                                                  //          .data
		.cmd_sink_channel       (router_003_src_channel),                                               //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                         //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                           //          .endofpacket
		.cmd_src_ready          (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                                //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                              //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                          //          .endofpacket
		.rsp_src_ready          (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (intel_niosv_m_0_instruction_manager_rd_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_valid_data)         // cmd_valid.data
	);

	AES_encrypt_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                  //      sink.ready
		.sink_channel       (router_src_channel),                                //          .channel
		.sink_data          (router_src_data),                                   //          .data
		.sink_startofpacket (router_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_src_valid),                                  //          .valid
		.src0_ready         (cmd_demux_src0_ready),                              //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                              //          .valid
		.src0_data          (cmd_demux_src0_data),                               //          .data
		.src0_channel       (cmd_demux_src0_channel),                            //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                        //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                              //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                              //          .valid
		.src1_data          (cmd_demux_src1_data),                               //          .data
		.src1_channel       (cmd_demux_src1_channel),                            //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                      //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                        //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                              //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                              //          .valid
		.src2_data          (cmd_demux_src2_data),                               //          .data
		.src2_channel       (cmd_demux_src2_channel),                            //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                      //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                        //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                              //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                              //          .valid
		.src3_data          (cmd_demux_src3_data),                               //          .data
		.src3_channel       (cmd_demux_src3_channel),                            //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                      //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                        //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                              //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                              //          .valid
		.src4_data          (cmd_demux_src4_data),                               //          .data
		.src4_channel       (cmd_demux_src4_channel),                            //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                      //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                         //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                              //      sink.ready
		.sink_channel       (router_001_src_channel),                            //          .channel
		.sink_data          (router_001_src_data),                               //          .data
		.sink_startofpacket (router_001_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_001_src_valid),                              //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                          //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                          //          .valid
		.src0_data          (cmd_demux_001_src0_data),                           //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                        //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                          //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                          //          .valid
		.src1_data          (cmd_demux_001_src1_data),                           //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                        //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                          //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                          //          .valid
		.src2_data          (cmd_demux_001_src2_data),                           //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                        //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                    //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                          //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                          //          .valid
		.src3_data          (cmd_demux_001_src3_data),                           //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                        //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                  //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                    //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                          //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                          //          .valid
		.src4_data          (cmd_demux_001_src4_data),                           //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                        //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                  //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                                        //        clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                    //  clk_reset.reset
		.sink_ready         (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_channel),       //           .channel
		.sink_data          (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (intel_niosv_m_0_instruction_manager_wr_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                             //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                              //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                             //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                              //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                                        //           .endofpacket
	);

	AES_encrypt_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                                        //        clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),                    //  clk_reset.reset
		.sink_ready         (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_channel),       //           .channel
		.sink_data          (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (intel_niosv_m_0_instruction_manager_rd_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                             //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                             //           .valid
		.src0_data          (cmd_demux_003_src0_data),                                              //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                                           //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                                       //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                             //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                             //           .valid
		.src1_data          (cmd_demux_003_src1_data),                                              //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                                           //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                                        //           .endofpacket
	);

	AES_encrypt_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_src_valid),                                 //          .valid
		.src_data            (cmd_mux_src_data),                                  //          .data
		.src_channel         (cmd_mux_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                            //          .channel
		.sink0_data          (cmd_demux_src0_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                         //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                             //          .valid
		.src_data            (cmd_mux_001_src_data),                              //          .data
		.src_channel         (cmd_mux_001_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_001_src0_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src0_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src0_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src0_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src0_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                             //          .valid
		.src_data            (cmd_mux_002_src_data),                              //          .data
		.src_channel         (cmd_mux_002_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                            //          .channel
		.sink0_data          (cmd_demux_src1_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_cmd_mux_003 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                             //          .valid
		.src_data            (cmd_mux_003_src_data),                              //          .data
		.src_channel         (cmd_mux_003_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                            //          .channel
		.sink0_data          (cmd_demux_src2_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                    //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                          //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                          //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                        //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                           //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                  //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                    //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                          //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                          //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                        //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                           //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                  //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_cmd_mux_003 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                             //          .valid
		.src_data            (cmd_mux_004_src_data),                              //          .data
		.src_channel         (cmd_mux_004_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                            //          .channel
		.sink0_data          (cmd_demux_src3_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),                    //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                          //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                          //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                        //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                           //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                  //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket),                    //          .endofpacket
		.sink3_ready         (cmd_demux_003_src1_ready),                          //     sink3.ready
		.sink3_valid         (cmd_demux_003_src1_valid),                          //          .valid
		.sink3_channel       (cmd_demux_003_src1_channel),                        //          .channel
		.sink3_data          (cmd_demux_003_src1_data),                           //          .data
		.sink3_startofpacket (cmd_demux_003_src1_startofpacket),                  //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src1_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_cmd_mux_002 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                             //          .valid
		.src_data            (cmd_mux_005_src_data),                              //          .data
		.src_channel         (cmd_mux_005_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                              //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                              //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                            //          .channel
		.sink0_data          (cmd_demux_src4_data),                               //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                        //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                          //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                        //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                           //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                              //      sink.ready
		.sink_channel       (router_004_src_channel),                            //          .channel
		.sink_data          (router_004_src_data),                               //          .data
		.sink_startofpacket (router_004_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_004_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_src0_data),                               //          .data
		.src0_channel       (rsp_demux_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                         //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                              //      sink.ready
		.sink_channel       (router_005_src_channel),                            //          .channel
		.sink_data          (router_005_src_data),                               //          .data
		.sink_startofpacket (router_005_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_005_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_001_src0_data),                           //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                              //      sink.ready
		.sink_channel       (router_006_src_channel),                            //          .channel
		.sink_data          (router_006_src_data),                               //          .data
		.sink_startofpacket (router_006_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_006_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_002_src0_data),                           //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_002_src1_data),                           //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_demux_003 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                              //      sink.ready
		.sink_channel       (router_007_src_channel),                            //          .channel
		.sink_data          (router_007_src_data),                               //          .data
		.sink_startofpacket (router_007_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_007_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_003_src0_data),                           //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_003_src1_data),                           //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                          //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                          //          .valid
		.src2_data          (rsp_demux_003_src2_data),                           //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                        //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket),                    //          .endofpacket
		.src3_ready         (rsp_demux_003_src3_ready),                          //      src3.ready
		.src3_valid         (rsp_demux_003_src3_valid),                          //          .valid
		.src3_data          (rsp_demux_003_src3_data),                           //          .data
		.src3_channel       (rsp_demux_003_src3_channel),                        //          .channel
		.src3_startofpacket (rsp_demux_003_src3_startofpacket),                  //          .startofpacket
		.src3_endofpacket   (rsp_demux_003_src3_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_demux_003 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                              //      sink.ready
		.sink_channel       (router_008_src_channel),                            //          .channel
		.sink_data          (router_008_src_data),                               //          .data
		.sink_startofpacket (router_008_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_008_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_004_src0_data),                           //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_004_src1_data),                           //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                    //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                          //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                          //          .valid
		.src2_data          (rsp_demux_004_src2_data),                           //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                        //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                  //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket),                    //          .endofpacket
		.src3_ready         (rsp_demux_004_src3_ready),                          //      src3.ready
		.src3_valid         (rsp_demux_004_src3_valid),                          //          .valid
		.src3_data          (rsp_demux_004_src3_data),                           //          .data
		.src3_channel       (rsp_demux_004_src3_channel),                        //          .channel
		.src3_startofpacket (rsp_demux_004_src3_startofpacket),                  //          .startofpacket
		.src3_endofpacket   (rsp_demux_004_src3_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_demux_002 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                              //      sink.ready
		.sink_channel       (router_009_src_channel),                            //          .channel
		.sink_data          (router_009_src_data),                               //          .data
		.sink_startofpacket (router_009_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_009_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_005_src0_data),                           //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_005_src1_data),                           //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                 //       src.ready
		.src_valid           (rsp_mux_src_valid),                                 //          .valid
		.src_data            (rsp_mux_src_data),                                  //          .data
		.src_channel         (rsp_mux_src_channel),                               //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                              //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                              //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                            //          .channel
		.sink0_data          (rsp_demux_src0_data),                               //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                        //          .endofpacket
		.sink1_ready         (rsp_demux_002_src0_ready),                          //     sink1.ready
		.sink1_valid         (rsp_demux_002_src0_valid),                          //          .valid
		.sink1_channel       (rsp_demux_002_src0_channel),                        //          .channel
		.sink1_data          (rsp_demux_002_src0_data),                           //          .data
		.sink1_startofpacket (rsp_demux_002_src0_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src0_endofpacket),                    //          .endofpacket
		.sink2_ready         (rsp_demux_003_src0_ready),                          //     sink2.ready
		.sink2_valid         (rsp_demux_003_src0_valid),                          //          .valid
		.sink2_channel       (rsp_demux_003_src0_channel),                        //          .channel
		.sink2_data          (rsp_demux_003_src0_data),                           //          .data
		.sink2_startofpacket (rsp_demux_003_src0_startofpacket),                  //          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src0_endofpacket),                    //          .endofpacket
		.sink3_ready         (rsp_demux_004_src0_ready),                          //     sink3.ready
		.sink3_valid         (rsp_demux_004_src0_valid),                          //          .valid
		.sink3_channel       (rsp_demux_004_src0_channel),                        //          .channel
		.sink3_data          (rsp_demux_004_src0_data),                           //          .data
		.sink3_startofpacket (rsp_demux_004_src0_startofpacket),                  //          .startofpacket
		.sink3_endofpacket   (rsp_demux_004_src0_endofpacket),                    //          .endofpacket
		.sink4_ready         (rsp_demux_005_src0_ready),                          //     sink4.ready
		.sink4_valid         (rsp_demux_005_src0_valid),                          //          .valid
		.sink4_channel       (rsp_demux_005_src0_channel),                        //          .channel
		.sink4_data          (rsp_demux_005_src0_data),                           //          .data
		.sink4_startofpacket (rsp_demux_005_src0_startofpacket),                  //          .startofpacket
		.sink4_endofpacket   (rsp_demux_005_src0_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                             //          .valid
		.src_data            (rsp_mux_001_src_data),                              //          .data
		.src_channel         (rsp_mux_001_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (rsp_demux_001_src0_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_001_src0_valid),                          //          .valid
		.sink0_channel       (rsp_demux_001_src0_channel),                        //          .channel
		.sink0_data          (rsp_demux_001_src0_data),                           //          .data
		.sink0_startofpacket (rsp_demux_001_src0_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src0_endofpacket),                    //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                          //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                          //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                        //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                           //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket),                    //          .endofpacket
		.sink2_ready         (rsp_demux_003_src1_ready),                          //     sink2.ready
		.sink2_valid         (rsp_demux_003_src1_valid),                          //          .valid
		.sink2_channel       (rsp_demux_003_src1_channel),                        //          .channel
		.sink2_data          (rsp_demux_003_src1_data),                           //          .data
		.sink2_startofpacket (rsp_demux_003_src1_startofpacket),                  //          .startofpacket
		.sink2_endofpacket   (rsp_demux_003_src1_endofpacket),                    //          .endofpacket
		.sink3_ready         (rsp_demux_004_src1_ready),                          //     sink3.ready
		.sink3_valid         (rsp_demux_004_src1_valid),                          //          .valid
		.sink3_channel       (rsp_demux_004_src1_channel),                        //          .channel
		.sink3_data          (rsp_demux_004_src1_data),                           //          .data
		.sink3_startofpacket (rsp_demux_004_src1_startofpacket),                  //          .startofpacket
		.sink3_endofpacket   (rsp_demux_004_src1_endofpacket),                    //          .endofpacket
		.sink4_ready         (rsp_demux_005_src1_ready),                          //     sink4.ready
		.sink4_valid         (rsp_demux_005_src1_valid),                          //          .valid
		.sink4_channel       (rsp_demux_005_src1_channel),                        //          .channel
		.sink4_data          (rsp_demux_005_src1_data),                           //          .data
		.sink4_startofpacket (rsp_demux_005_src1_startofpacket),                  //          .startofpacket
		.sink4_endofpacket   (rsp_demux_005_src1_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                             //          .valid
		.src_data            (rsp_mux_002_src_data),                              //          .data
		.src_channel         (rsp_mux_002_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (rsp_demux_003_src2_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_003_src2_valid),                          //          .valid
		.sink0_channel       (rsp_demux_003_src2_channel),                        //          .channel
		.sink0_data          (rsp_demux_003_src2_data),                           //          .data
		.sink0_startofpacket (rsp_demux_003_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src2_endofpacket),                    //          .endofpacket
		.sink1_ready         (rsp_demux_004_src2_ready),                          //     sink1.ready
		.sink1_valid         (rsp_demux_004_src2_valid),                          //          .valid
		.sink1_channel       (rsp_demux_004_src2_channel),                        //          .channel
		.sink1_data          (rsp_demux_004_src2_data),                           //          .data
		.sink1_startofpacket (rsp_demux_004_src2_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src2_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                     //       clk.clk
		.reset               (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                             //          .valid
		.src_data            (rsp_mux_003_src_data),                              //          .data
		.src_channel         (rsp_mux_003_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (rsp_demux_003_src3_ready),                          //     sink0.ready
		.sink0_valid         (rsp_demux_003_src3_valid),                          //          .valid
		.sink0_channel       (rsp_demux_003_src3_channel),                        //          .channel
		.sink0_data          (rsp_demux_003_src3_data),                           //          .data
		.sink0_startofpacket (rsp_demux_003_src3_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (rsp_demux_003_src3_endofpacket),                    //          .endofpacket
		.sink1_ready         (rsp_demux_004_src3_ready),                          //     sink1.ready
		.sink1_valid         (rsp_demux_004_src3_valid),                          //          .valid
		.sink1_channel       (rsp_demux_004_src3_channel),                        //          .channel
		.sink1_data          (rsp_demux_004_src3_data),                           //          .data
		.sink1_startofpacket (rsp_demux_004_src3_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src3_endofpacket)                     //          .endofpacket
	);

	AES_encrypt_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	AES_encrypt_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (intel_niosv_m_0_dm_agent_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

	AES_encrypt_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (intel_niosv_m_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                  //         .error
	);

	AES_encrypt_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (intel_niosv_m_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (intel_niosv_m_0_timer_sw_agent_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                          //         .error
	);

endmodule
